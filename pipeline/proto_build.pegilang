parser "github.com/pegilang/scheme/v1"

import (
  "github.com/pegilang/core"
  "github.com/pegipkg/git-subscribe"
  "github.com/pegipkg/git-pull"
  "github.com/pegipkg/tool"
  "github.com/pegipkg/git-push"
  "github.com/pegipkg/regexp"
)

core.stream[core.message] gitChangeNotifications := git-subscibe({
    url: "./proto",
    match: regexp(`.proto$`),
})

core.message gitChangeNotification := gitChangeNotifications | core.stream.each(gitChangeNotifications)

core.fs protoDir, core.error pullErr := gitChangeNotification | git-pull({
    url: gitChangeNotification.url,
})

core.fs workdir := protoDir | core.fs.resolve(protoDir, "..")
core.fs outDir := workdir | core.fs.resolve(workdir, "./cpp/")
core.url targetUrl = gitChangeNotification | core.url.resolve(gitChangeNotification.url, "../cpp")

core.message buildInfo, core.error buildErr :=
    | protoDir, outDir, workdir
    | tool({
        image: "arch",
        install: ["protobuf"],
        env: {
              PROTO_DIR: core.fs.path(protoDir),
              CPP_DIR: core.fs.path(outDir),
        },
        workdir: workdir,
        run: "/bin/bash -c",
        input: <<EOF
          protoc --cpp_out $CPP_DIR `find $PROTO_DIR | grep .proto$`
        EOF,
    })

core.message pushInfo, core.error pushErr :=
    | buildInfo, targetUrl, outDir
    | git-push({
        to: targetUrl,
        from: outDir,
        filter: regexp(".*.cpp$"),
    })
